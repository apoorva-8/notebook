import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import sklearn.metrics as sm
import seaborn as sns

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
data= pd.read_csv('Iris.csv')
data.head()
data.tail()
data.info()
data.describe()
data.isnull().sum()
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
plt.figure(figsize=(30,6))

plt.subplot(1,4,1)
sns.boxplot(data["SepalLengthCm"])

plt.subplot(1,4,2)
sns.boxplot(data["SepalWidthCm"])

plt.subplot(1,4,3)
sns.boxplot(data["PetalLengthCm"])

plt.subplot(1,4,4)
sns.boxplot(data["PetalWidthCm"])

plt.show()
cols=data.iloc[:,1:5]
cols.corr(method='pearson')
sns.pairplot(data,hue='Species')
newdata= data.drop('Species',1)
newdata.head()
wcss = []

for i in range(1,6):  
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state= 42)  
    kmeans.fit(newdata)  
    wcss.append(kmeans.inertia_)
plt.plot(range(1,6), wcss)  
plt.title('The Elobw Method Graph')  
plt.xlabel('Number of clusters(k)')  
plt.ylabel('wcss')  
plt.show()  
range_n_clusters = [3,4,5]

for num_clusters in range_n_clusters:
    kmeans = KMeans(n_clusters=num_clusters, max_iter=50)
    kmeans.fit(newdata)
    
    cluster_labels = kmeans.labels_
    
    silhouetteavg= silhouette_score(newdata, cluster_labels)
    print("For n_clusters={0}, the silhouette score is {1}".format(num_clusters, silhouetteavg))
kmeans = KMeans(n_clusters= 3, init='k-means++', max_iter=300, n_init=10, random_state = 0) 
y_kmeans= kmeans.fit_predict(newdata)
x = data.iloc[:,[0,1,2,3]].values

#visualising the clusters
plt.scatter(x[y_kmeans == 0,0], x[y_kmeans == 0,1], s=100, c='purple', label='Iris-setosa')
plt.scatter(x[y_kmeans == 1,0], x[y_kmeans == 1,1], s=100, c='yellow', label='Iris-versicolour')
plt.scatter(x[y_kmeans == 2,0], x[y_kmeans == 2,1], s=100, c='pink', label='Iris-virginica')

#plotting the centroids of clusters
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1], s=100, c='red', label='centroids')
plt.legend()
fig = plt.figure(figsize = (8,8))
ax= fig.add_subplot(111,projection = '3d')
plt.scatter(x[y_kmeans == 0,0], x[y_kmeans == 0,1], s=100, c='purple', label='Iris-setosa')
plt.scatter(x[y_kmeans == 1,0], x[y_kmeans == 1,1], s=100, c='yellow', label='Iris-versicolour')
plt.scatter(x[y_kmeans == 2,0], x[y_kmeans == 2,1], s=100, c='pink', label='Iris-virginica')
plt.figure(figsize=(15,6))

plt.subplot(1,4,1)
sns.boxplot(y= data['SepalLengthCm'], x=data['Species'])
plt.title("Sepal Length\n")

plt.subplot(1,4,2)
sns.boxplot(y= data['SepalWidthCm'], x=data['Species'])
plt.title("Sepal Width\n")

plt.subplot(1,4,3)
sns.boxplot(y= data['PetalLengthCm'], x=data['Species'])
plt.title("Petal Length\n")


plt.subplot(1,4,4)
sns.boxplot(y= data['PetalWidthCm'], x=data['Species'])
plt.title("Petal Width\n")

plt.show()



